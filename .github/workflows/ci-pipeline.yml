name: CI/CD Pipeline

on:
  push:
    tags: # Also trigger on tags for releases
      - 'v*.*.*' # Example: Trigger on tags like v1.0.0
  pull_request:
  workflow_dispatch:
  

jobs:
  helm_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.10.0 # Specify a Helm version, adjust if needed

      - name: Run helm lint
        # Optional: Add conditional execution based on file changes if desired
        run: helm lint ./cycle-tracker

  python_lint_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies with uv sync
        run: uv sync

      - name: Run black linter
        run: black --check .

      - name: Run isort linter
        run: isort --check-only --profile black --filter-files .

      - name: Run pytest
        run: pytest

  build_and_push_backend_image:
    runs-on: ubuntu-latest
    needs: python_lint_test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,pattern={{branch}}
            type=sha,prefix=sha-,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{version}},value=latest
          outputs: |
            version=${{ steps.meta.outputs.version }}
            ref_name=${{ github.ref_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_chart:
    runs-on: ubuntu-latest
    needs: build_and_push_backend_image
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    env:
      RELEASE_NAME: cycle-tracker-backend
      NAMESPACE: default

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
           fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.10.0

      - name: Determine Image Tag for Deployment
        id: get_tag
        run: |
          BUILT_VERSION="${{ needs.build_and_push_backend_image.outputs.version }}"
          REF_NAME="${{ needs.build_and_push_backend_image.outputs.ref_name }}"

          IMAGE_TAG="$REF_NAME"

          if [[ -n "$BUILT_VERSION" ]]; then
             IMAGE_TAG="$BUILT_VERSION"
          fi

          echo "Determined image tag for deployment: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy Helm chart
        run: |
          helm upgrade --install \
            ${{ env.RELEASE_NAME }} \
            ./cycle-tracker \
            --namespace ${{ env.NAMESPACE }} \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ steps.get_tag.outputs.image_tag }} \
            --wait

  notify_matrix:
    runs-on: ubuntu-latest
    # This job depends on ALL previous jobs
    needs: [helm_lint, python_lint_test, build_and_push_backend_image, deploy_chart]
    # This job will always run, regardless of whether previous jobs succeeded or failed
    if: always()

    steps:
      - name: Send Matrix notification
        uses: Cadair/matrix-notify-action@main
        id: message
        with:
          homeserver: ${{ secrets.MATRIX_HOMESERVER }}
          room_id: ${{ secrets.MATRIX_ROOM_ID }}
          matrix_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
